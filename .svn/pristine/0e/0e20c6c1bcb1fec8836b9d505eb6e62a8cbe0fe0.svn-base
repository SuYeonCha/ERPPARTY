package kr.or.ddit.controller.head;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.service.head.ICounselService;
import kr.or.ddit.vo.head.HeadPaginationInfoVO;
import kr.or.ddit.vo.head.MenuVO;
import kr.or.ddit.vo.owner.OwnerVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/head")
public class FoundationController {
	
	@Inject
	private ICounselService counselService;
	
	@RequestMapping(value = "/counseling.do", method=RequestMethod.GET)
	public String OwnerList(
		@RequestParam(name="page", required = false, defaultValue = "1")int currentPage,
        @RequestParam(required = false, defaultValue = "title") String searchType,
        @RequestParam(required = false)String searchWord,
		Model model) {
	
    HeadPaginationInfoVO<OwnerVO> pagingVO = new HeadPaginationInfoVO<OwnerVO>();
    
    // 검색이 이뤄지면 아래가 실행됨
      if(StringUtils.isNotBlank(searchWord)) {
         pagingVO.setSearchType(searchType);
         pagingVO.setSearchWord(searchWord);
         model.addAttribute("searchType", searchType);
         model.addAttribute("searchWord", searchWord);
      }
	
    pagingVO.setCurrentPage(currentPage);   // startRow, endRow, startPage, endPage가 결정
    int totalRecord = counselService.selectCounselCount(pagingVO);   // 총 게시글 수
	int selectCounselCount = counselService.selectCounselCount(pagingVO);

    pagingVO.setTotalPage(totalRecord);   // totalPage 결정
    List<OwnerVO> dataList =  counselService.selectCounselList(pagingVO);
    pagingVO.setDataList(dataList);
    
	model.addAttribute("totalRecord",totalRecord);
    model.addAttribute("pagingVO",pagingVO); 
		
		log.info("Counseling(): 시작");
		return "head/foundation/counseling";
	}
	
	@ResponseBody
	@RequestMapping(value = "/counselDetail.do", produces = "application/json;charset=utf-8")
	public ResponseEntity<OwnerVO> counselDetail(@RequestBody OwnerVO ownerVO) {

	OwnerVO	owner = counselService.counselDetail(ownerVO);
			
	return new ResponseEntity<OwnerVO>(owner, HttpStatus.OK);
	}
	
}
