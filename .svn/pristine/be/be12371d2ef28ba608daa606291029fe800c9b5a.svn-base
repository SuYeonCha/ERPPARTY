package kr.or.ddit.controller.head;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.service.head.IProposalService;
import kr.or.ddit.vo.head.HeadBoardVO;
import kr.or.ddit.vo.head.ProposalVO;
import kr.or.ddit.vo.member.BoardVO;
import kr.or.ddit.vo.member.MemberVO;
import kr.or.ddit.vo.member.PaginationInfoVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/head")
public class ProposalController {

	@Inject
	private IProposalService proposalService;
	
	@RequestMapping(value = "/proposalList.do")
	public String proposalList(
			@RequestParam(name = "page", required = false, defaultValue = "1")int currentPage,
			@RequestParam(required = false, defaultValue = "title") String searchType,
			@RequestParam(required = false) String searchWord,
			Model model
){
		
		PaginationInfoVO<BoardVO> pagingVO = new PaginationInfoVO<BoardVO>();
		
		// 검색이 이뤄지면 아래가 실행됨
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchType", searchType);
			model.addAttribute("searchWord", searchWord);
		}
		
		pagingVO.setCurrentPage(currentPage);  
		int totalRecord = proposalService.selectBoardCount(pagingVO); //총 게시글 수
		
		pagingVO.setTotalRecord(totalRecord); //totalPage 결정
		List<BoardVO> dataList = proposalService.selectBoardList(pagingVO);
		pagingVO.setDataList(dataList);
		
		model.addAttribute("pagingVO", pagingVO);
		
		return "head/proposal/list";
	}
	
	@GetMapping(value = "/proposalDetail.do" )
	public String proposalDetail(String memId, int tableNo, Model model) {
		BoardVO boardVO = proposalService.selectBoard(tableNo);
		model.addAttribute("board", boardVO);
		model.addAttribute("memId", memId);
		return "head/proposal/detail";
	}
	
	@RequestMapping(value = "/proposalInsert.do", method = RequestMethod.POST)
	public String proposalInsert(
			HttpServletRequest req,
			HttpSession session,
			RedirectAttributes ra,
			ProposalVO proposalVO, MemberVO memberVO, Model model) {
		String goPage="";
		
		
		Map<String, String> errors = new HashMap<String, String>();
		
		if(StringUtils.isBlank(proposalVO.getBoardContent())) {
			errors.put("boardContent", "내용을 입력해주세요.");
		}
		if(errors.size()>0) {//에러발생
			model.addAttribute("errors",errors);
			model.addAttribute("proposalVO", proposalVO);
			goPage = "head/notice/form";
		}else {
//			User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			
//			memberVO.setMemId(user.getUsername());
			
			ServiceResult result = proposalService.insertBoard(req, proposalVO);
			
			if(result.equals(ServiceResult.OK)) {
				goPage = "redirect:/head/proposalDetail.do?boardNo=" + proposalVO.getTableNo();
			}else {
				model.addAttribute("message","서버에러, 다시 시도해주세요!");
				goPage = "head/proposal/proposalDetail.do";
			}
		}
		return goPage;
	}
	
}
